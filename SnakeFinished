import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.LinkedList;
import java.util.Random;

public class SnakeGame extends JPanel implements ActionListener {

    private final int TILE_SIZE = 30;
    private final int WIDTH = 600;
    private final int HEIGHT = 600;
    private final int NUM_TILES_X = WIDTH / TILE_SIZE;
    private final int NUM_TILES_Y = HEIGHT / TILE_SIZE;
    private LinkedList<Point> snake;
    private Point food;
    private char direction;
    private boolean gameOver;
    private Timer timer;

    public SnakeGame() {
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(Color.BLACK);

        snake = new LinkedList<>();
        snake.add(new Point(NUM_TILES_X / 2, NUM_TILES_Y / 2));  // Start in the middle of the grid
        direction = 'R';  // Initial direction: Right
        spawnFood();
        gameOver = false;

        timer = new Timer(100, this);  // Update every 100ms
        timer.start();

        // KeyListener to change the direction of the snake
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (gameOver) return;
                int key = e.getKeyCode();
                if (key == KeyEvent.VK_UP && direction != 'D') {
                    direction = 'U'; // Up
                } else if (key == KeyEvent.VK_DOWN && direction != 'U') {
                    direction = 'D'; // Down
                } else if (key == KeyEvent.VK_LEFT && direction != 'R') {
                    direction = 'L'; // Left
                } else if (key == KeyEvent.VK_RIGHT && direction != 'L') {
                    direction = 'R'; // Right
                }
            }
        });
        setFocusable(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (gameOver) {
            return;
        }

        // Move the snake
        Point head = snake.getFirst();
        Point newHead = null;

        if (direction == 'U') {
            newHead = new Point(head.x, head.y - 1);
        } else if (direction == 'D') {
            newHead = new Point(head.x, head.y + 1);
        } else if (direction == 'L') {
            newHead = new Point(head.x - 1, head.y);
        } else if (direction == 'R') {
            newHead = new Point(head.x + 1, head.y);
        }

        // Check if snake runs into itself or goes out of bounds
        if (newHead.x < 0 || newHead.x >= NUM_TILES_X || newHead.y < 0 || newHead.y >= NUM_TILES_Y || snake.contains(newHead)) {
            gameOver = true;
            timer.stop();
            repaint();
            return;
        }

        // Move the snake
        snake.addFirst(newHead);

        // Check if snake eats food
        if (newHead.equals(food)) {
            spawnFood();
        } else {
            snake.removeLast(); // Remove the last part of the snake
        }

        repaint();
    }

    private void spawnFood() {
        Random rand = new Random();
        int x = rand.nextInt(NUM_TILES_X);
        int y = rand.nextInt(NUM_TILES_Y);
        food = new Point(x, y);

        // Make sure food is not spawned on the snake
        while (snake.contains(food)) {
            x = rand.nextInt(NUM_TILES_X);
            y = rand.nextInt(NUM_TILES_Y);
            food = new Point(x, y);
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (gameOver) {
            g.setColor(Color.RED);
            g.setFont(new Font("Arial", Font.BOLD, 30));
            g.drawString("Game Over!", WIDTH / 3, HEIGHT / 2);
            return;
        }

        // Draw the snake
        g.setColor(Color.GREEN);
        for (Point p : snake) {
            g.fillRect(p.x * TILE_SIZE, p.y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
        }

        // Draw the food
        g.setColor(Color.RED);
        g.fillRect(food.x * TILE_SIZE, food.y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Snake Game");
        SnakeGame game = new SnakeGame();
        frame.add(game);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}

